diff --git a/src/main/scala/find/find.scala b/src/main/scala/find/find.scala
index dae8e13..67dda04 100644
--- a/src/main/scala/find/find.scala
+++ b/src/main/scala/find/find.scala
@@ -1,89 +1,42 @@
 package find
 
-
-def findAllAndPrint(entry: cs214.Entry): Boolean =
-  println(entry.path())
-
-  if entry.isDirectory() && entry.hasChildren() then
-    findAllAndPrint(entry.firstChild())
-  if entry.hasNextSibling() then
-    findAllAndPrint(entry.nextSibling())
-
-  true
-
-def findByNameAndPrint(entry: cs214.Entry, name: String): Boolean =
+def findAndPrint(entry: cs214.Entry, predicate: cs214.Entry => Boolean): Boolean =
   val thisFound =
-    entry.name() == name
-      && { println(entry.path()); true }
+    predicate(entry) 
+    && { 
+      println(entry.path()) 
+      true 
+    }
 
-  val childrenFound =
-    entry.isDirectory()
-      && entry.hasChildren()
-      && findByNameAndPrint(entry.firstChild(), name)
+  val childrenFound = 
+    if entry.isDirectory() then
+      entry.hasChildren()
+        && findAndPrint(entry.firstChild(), predicate)
+    else false
 
   val nextSiblingsFound =
     entry.hasNextSibling()
-      && findByNameAndPrint(entry.nextSibling(), name)
+      && findAndPrint(entry.nextSibling(), predicate)
 
   thisFound || childrenFound || nextSiblingsFound
 
-def findBySizeEqAndPrint(entry: cs214.Entry, size: Long): Boolean =
-  val thisFound =
-    !entry.isDirectory()
-      && entry.size() == size
-      && { println(entry.path()); true }
-
-  val childrenFound =
-    entry.isDirectory()
-      && entry.hasChildren()
-      && findBySizeEqAndPrint(entry.firstChild(), size)
+def findAllAndPrint(entry: cs214.Entry): Boolean =
+  findAndPrint(entry, _ => true)
 
-  val nextSiblingsFound =
-    entry.hasNextSibling()
-      && findBySizeEqAndPrint(entry.nextSibling(), size)
+def findByNameAndPrint(entry: cs214.Entry, name: String): Boolean =
+  findAndPrint(entry, _.name() == name)
 
-  thisFound || childrenFound || nextSiblingsFound
+def findBySizeEqAndPrint(entry: cs214.Entry, size: Long): Boolean =
+  findAndPrint(entry, entry => (!entry.isDirectory() && entry.size() == size))
 
 def findBySizeGeAndPrint(entry: cs214.Entry, minSize: Long): Boolean =
-  val thisFound =
-    !entry.isDirectory()
-      && entry.size() >= minSize
-      && { println(entry.path()); true }
-
-  val childrenFound =
-    entry.isDirectory()
-      && entry.hasChildren()
-      && findBySizeGeAndPrint(entry.firstChild(), minSize)
-
-  val nextSiblingsFound =
-    entry.hasNextSibling()
-      && findBySizeGeAndPrint(entry.nextSibling(), minSize)
-
-  thisFound || childrenFound || nextSiblingsFound
-
+  findAndPrint(entry, entry => (!entry.isDirectory() && entry.size() >= minSize))
+  
 def findEmptyAndPrint(entry: cs214.Entry): Boolean =
-  val isEmpty =
-    if entry.isDirectory() then
-      !entry.hasChildren()
-    else
-      entry.size() == 0
-
-  val thisFound =
-    isEmpty && { println(entry.path()); true }
-
-  val childrenFound =
-    entry.isDirectory()
-      && entry.hasChildren()
-      && findEmptyAndPrint(entry.firstChild())
-
-  val nextSiblingsFound =
-    entry.hasNextSibling()
-      && findEmptyAndPrint(entry.nextSibling())
-
-  thisFound || childrenFound || nextSiblingsFound
+  findAndPrint(entry, entry => (entry.isDirectory() && !entry.hasChildren()) || (!entry.isDirectory() && entry.size() == 0))
 
 def howManyHoursISpentOnThisLab(): Double =
-  0.0 // in hours, so put 3.5 here if you spent 3 hours and a half on the lab
+  1.0 // in hours, so put 3.5 here if you spent 3 hours and a half on the lab
 
 def findFirstByNameAndPrint(entry: cs214.Entry, name: String): Boolean =
   val thisFound =
